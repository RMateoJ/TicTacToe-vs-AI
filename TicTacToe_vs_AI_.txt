Source Code
/////////////////////////////////////////////////////////////////
// Program Name: Tic_Tac_Toe					    //
// Program Version: 2.0 			           		    //
// Author: Rolando Mateo				   		    //
// Date: 5/22/17				            		    // 
// Inputs to Program:  User's choice of space.                 //
//			    Choice to play again.			    //				
// Outputs from Program: 	Board after user inputs move.        //
//				Whether player wins, lost, or draw.  //
/////////////////////////////////////////////////////////////////



#include <iostream>
using namespace std;


/***********************
 **Function Prototypes**
 ***********************/

void drawBoard(int*);
int gameComplete(const int*);
int cannotLose(int*, int);
int computersTurn(int*);


/*************************************
 ** Non-returning function that is  **
 ** used to draw the Tic Tac Toe    **
 ** board when called.              **
 *************************************/
void drawBoard(int *board)
{
	int k = 0;
	cout << "+---++---++---+\n";
	
	// Iteration used to draw out board with
	// 3 rows and 3 columns.
	for (int index = 0; index < 3; index++)
	{
		for(int j = 0; j < 3; j++)
		{
			cout << "| ";
			if(board[k] == 0)
			{
				cout << k+1 << " |";
			}
			else
			{
				if(board[k]==-1)
				{
					cout << "X |";
				}
				else
				{
					cout << "O |";
				}
			} k++;
		} cout << "\n+---++---++---+\n";
	}
}


/**********************************
 ** Function that returns whether**
 ** the game has been decided.   **
 **********************************/
int gameComplete(const int *board)
{
	//Array of possible win conditions
	int wins[8][3] =  {{0,1,2}, {3,4,5}, {6,7,8},
						{0,3,6}, {1,4,7}, {2,5,8},
						{0,4,8}, {2,4,6}};
	
	//For loop used to check for winner.
	for(int i = 0; i < 8; i++)
	{
		if(board[wins[i][0]] != 0 &&
				board[wins[i][0]] == board[wins[i][1]] &&
				board[wins[i][1]] == board[wins[i][2]])
			return board[wins[i][2]];
	} return 0;
}

/***************************************
 ** Function that returns the how     **
 ** the computer decides to make its  **
 ** next move. This also assures that **
 ** the computer never loses.         **
 ***************************************/
int cannotLose(int *board, int player)
{
	// variable winner used to
	// check first for winner
	// before proceeding with
	// function.
	int winner = gameComplete(board);
	
	if(winner != 0)
	{
		return winner*player;
	}

	
	// Evaluates each possible move by
	// calling itself recursively
	int move = -1;
	int standing = -2;

	for(int i = 0; i < 9; i++)
	{
		if(board[i] == 0)
		{
			board[i] = player;
			int currentStanding = -cannotLose(board, player*-1);

			if(currentStanding > standing)
			{
				standing = currentStanding;
				move = i;
			}
			board[i] = 0;
		}
	}
	if(move == -1)
		return 0;
	return standing;
}



/******************************************
 ** Function that returns the computer's **
 ** move based on the function that keeps**
 ** the computer from losing.            **
 ******************************************/
int computersTurn(int *board)
{
	int move = -1;
	int standing = -2;

	for(int i = 0; i < 9; i++)
	{
		if(board[i] == 0)
		{
			board[i] = 1;
			int tempStanding = -cannotLose(board, -1);
			board[i] = 0;

			if(tempStanding > standing)
			{
				standing = tempStanding;
				move = i;
			}
		}
	} return move;
}





/*********************************************
 ** Main function to demonstrate the        **
 ** functions through a game of tic tac toe **
 *********************************************/
int main()
{
	// Used to ask player if
	// they want to play again.
	char response;
	
	do{

		cout<< " Tic-Tac-Toe \n";
		cout<< "    Board    \n";
		cout<< "+---+---+---+\n";
		cout<< "| 1 | 2 | 3 |\n";
		cout<< "+---+---+---+\n";
		cout<< "| 4 | 5 | 6 |\n";
		cout<< "+---+---+---+\n";
		cout<< "| 7 | 8 | 9 |\n";
		cout<< "+---+---+---+\n";
		
		cout<< "\n*****************\n"
				"**Pick a number**\n"
				"**and only these*\n"
				"*****numbers!*****"
				"\n***************\n";
		
		// Will be used for checking conditions
		int board[9] = {0};
		int moves = 0,k;

		// Goes through sequence until there
		// is a winner
		while(moves < 9)
		{
			int thisMove;
			cout<< "\n\nYour move: ";
			cin >> thisMove;
			
			// Checks for input validation
			if(board[thisMove-1]==0)
			{
				board[thisMove-1]=-1;
				moves++;

				if(gameComplete(board) == 0)
				{
					k=computersTurn(board);
					board[k]=1;

					cout<< "~~~~~~~~~~~~~~~~~~~~~~";
					cout<< "\nComputer's Turn.\n";
					drawBoard(board);
					cout<< "~~~~~~~~~~~~~~~~~~~~~~\n";
					moves++;
					if(gameComplete(board) != 0)
					{
						break;
					}
				}
				else
					break;
			}
			else
			{
				cout << "\nInvalid move. Try again.";
			}
		}

		//Switch statements used to determine
		//outcome of the game.
		switch(gameComplete(board))
		{
		
		// Game is a draw
		case 0:
			cout << "Cat's game! Better luck next time!\n";
			cout << "Do you want to play again? (Y/N): ";
			cin >> response;
			response = tolower(response);
			cout << endl;
			break;
		// User loses game.
		case 1:
			cout << "You lose. Better luck next time!\n";
			cout << "Do you want to play again? (Y/N): ";
			cin >> response;
			response = tolower(response);
			cout << endl;
			break;
		// User wins.
		case -1:
			cout << "You win!\n";
			cout << "Do you want to play again? (Y/N): ";
			cin >> response;
			response = tolower(response);
			cout << endl;
			break;
		}
	}while(response == 'y'); // Loops game again.
}
